const uploadNewFile = async (file: File) => {
    setIsUploading(true);
    setStatusMessage("Uploading file...");
    const formData = new FormData();
    formData.append('file', file);
    
    // Add current path as a form field if we're in a folder
    if (currentPath.length > 0) {
        formData.append('folder_path', currentPath.join('/'));
    }

    try {
        const response = await fetch('http://localhost:5000/storage/upload', {
            method: 'POST',
            body: formData,
        });
        
        const data = await response.json() as UploadResponse;
        
        if (response.ok) {
            const newFile: FileItem = {
                name: data.fileinfo.metadata.file_name,
                type: 'file',
                object_key: data.fileinfo.object_key
            };

            // Since the backend now supports folders, refresh all files instead of manual updates
            await fetchFiles();
            
            setStatusMessage(`File "${data.fileinfo.metadata.file_name}" uploaded successfully.`);
        } else {
            setStatusMessage(data.message || 'Upload failed');
        }
    } catch (error) {
        console.error('Upload error:', error);
        setStatusMessage("Error uploading file");
    } finally {
        setIsUploading(false);
    }
};

// Update removeItem to also refresh the file list after deletion
const removeItem = async (itemName: string) => {
    const itemToRemove = currentItems.find(item => item.name === itemName);
    
    if (!itemToRemove) {
        setStatusMessage("Item not found");
        return;
    }
    
    if (itemToRemove.type === 'file') {
        try {
            // Use the object_key for removal via the storage/remove endpoint
            if (!itemToRemove.object_key) {
                throw new Error("File has no object key");
            }
            
            const response = await fetch(`http://localhost:5000/storage/remove/${itemToRemove.object_key}`, {
                method: 'DELETE',
            });
            
            const data = await response.json();
            
            if (response.ok) {
                // Instead of updating state manually, fetch fresh data
                await fetchFiles();
                setStatusMessage("File removed successfully");
            } else {
                setStatusMessage(data.message || "Remove failed");
            }
        } catch (error) {
            console.error('Error removing file:', error);
            setStatusMessage("Error removing file");
        }
    } else {
        // Handle folder removal locally
        // Note: This won't remove files from backend storage
        // We'd need a recursive delete endpoint for that
        const updatedItems = removeItemFromPath(items, currentPath, itemName);
        setItems(updatedItems);
        setStatusMessage(`Folder ${itemToRemove.name} removed`);
    }
    
    setFileToRemove(null);
};

// Add persistence for folders
const createFolder = () => {
    if (!newFolderName.trim()) return;

    // Create a new folder
    const newFolder: FolderItem = {
        name: newFolderName,
        type: 'folder',
        files: []
    };

    if (currentPath.length === 0) {
        // Add folder to root
        setItems(prev => [...prev, newFolder]);
    } else {
        // Add folder to the current path
        const updatedItems = addFolderToPath(items, currentPath, newFolder);
        setItems(updatedItems);
    }

    setStatusMessage(`Folder "${newFolderName}" created successfully.`);
    setIsFolderModalOpen(false);
};
